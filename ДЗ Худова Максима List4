{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7f77ee3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import io\n",
    "import statsmodels.formula.api as smf\n",
    "import scipy.stats as stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3c940643",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' Names Estimate Std.Error\\n(Intercept) 3446.830     81.840\\ntotwrk        -0.169      0.018\\nage            2.714      1.472\\nsouth        102.272     41.925\\nmale          87.108     35.173\\nsmsa         -54.188     33.193\\nyngkid       -13.051     50.459\\nmarr          31.360     42.263\\nunion         11.866     38.186'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "date = ''' Names Estimate Std.Error\n",
    "(Intercept) 3446.830     81.840\n",
    "totwrk        -0.169      0.018\n",
    "age            2.714      1.472\n",
    "south        102.272     41.925\n",
    "male          87.108     35.173\n",
    "smsa         -54.188     33.193\n",
    "yngkid       -13.051     50.459\n",
    "marr          31.360     42.263\n",
    "union         11.866     38.186'''\n",
    "date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7ec83503",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Names</th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Intercept)</td>\n",
       "      <td>3446.830</td>\n",
       "      <td>81.840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>totwrk</td>\n",
       "      <td>-0.169</td>\n",
       "      <td>0.018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>age</td>\n",
       "      <td>2.714</td>\n",
       "      <td>1.472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>south</td>\n",
       "      <td>102.272</td>\n",
       "      <td>41.925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>male</td>\n",
       "      <td>87.108</td>\n",
       "      <td>35.173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>smsa</td>\n",
       "      <td>-54.188</td>\n",
       "      <td>33.193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>yngkid</td>\n",
       "      <td>-13.051</td>\n",
       "      <td>50.459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>marr</td>\n",
       "      <td>31.360</td>\n",
       "      <td>42.263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>union</td>\n",
       "      <td>11.866</td>\n",
       "      <td>38.186</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Names  Estimate  Std.Error\n",
       "0  (Intercept)  3446.830     81.840\n",
       "1       totwrk    -0.169      0.018\n",
       "2          age     2.714      1.472\n",
       "3        south   102.272     41.925\n",
       "4         male    87.108     35.173\n",
       "5         smsa   -54.188     33.193\n",
       "6       yngkid   -13.051     50.459\n",
       "7         marr    31.360     42.263\n",
       "8        union    11.866     38.186"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(io.StringIO(date), sep='\\s+')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "84566c1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.9633684547051231"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_critil = stats.t.ppf(1 - 0.025, 707 - 9)\n",
    "t_critil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e20d64c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Names</th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>znachimost</th>\n",
       "      <th>result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Intercept)</td>\n",
       "      <td>3446.830</td>\n",
       "      <td>81.840</td>\n",
       "      <td>42.116691</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>totwrk</td>\n",
       "      <td>-0.169</td>\n",
       "      <td>0.018</td>\n",
       "      <td>9.388889</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>age</td>\n",
       "      <td>2.714</td>\n",
       "      <td>1.472</td>\n",
       "      <td>1.843750</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>south</td>\n",
       "      <td>102.272</td>\n",
       "      <td>41.925</td>\n",
       "      <td>2.439404</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>male</td>\n",
       "      <td>87.108</td>\n",
       "      <td>35.173</td>\n",
       "      <td>2.476559</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>smsa</td>\n",
       "      <td>-54.188</td>\n",
       "      <td>33.193</td>\n",
       "      <td>1.632513</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>yngkid</td>\n",
       "      <td>-13.051</td>\n",
       "      <td>50.459</td>\n",
       "      <td>0.258646</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>marr</td>\n",
       "      <td>31.360</td>\n",
       "      <td>42.263</td>\n",
       "      <td>0.742020</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>union</td>\n",
       "      <td>11.866</td>\n",
       "      <td>38.186</td>\n",
       "      <td>0.310742</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Names  Estimate  Std.Error  znachimost       result\n",
       "0  (Intercept)  3446.830     81.840   42.116691     znachimo\n",
       "1       totwrk    -0.169      0.018    9.388889     znachimo\n",
       "2          age     2.714      1.472    1.843750  ne_znachimo\n",
       "3        south   102.272     41.925    2.439404     znachimo\n",
       "4         male    87.108     35.173    2.476559     znachimo\n",
       "5         smsa   -54.188     33.193    1.632513  ne_znachimo\n",
       "6       yngkid   -13.051     50.459    0.258646  ne_znachimo\n",
       "7         marr    31.360     42.263    0.742020  ne_znachimo\n",
       "8        union    11.866     38.186    0.310742  ne_znachimo"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['result'] = df.apply(lambda x: 'znachimo' if np.abs(x['znachimost']) > t_critil else 'ne_znachimo', axis=1 )\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16e9f454",
   "metadata": {},
   "source": [
    "### Задача 1.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9315bbf7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Estimate Std.Error t value  Pr(>|t|)    \\n(Intercept) 3431.803558   96.309432 35.6331 < 2.2e-16 ***\\ntotwrk        -0.158079    0.020867 -7.5755 1.639e-13 ***\\nage            2.437082    1.671818  1.4577   0.14551    \\nsouth         78.046123   45.287154  1.7234   0.08542 .  \\nmale          36.485386   43.350193  0.8416   0.40037    \\nsmsa         -34.964643   38.231919 -0.9145   0.36086    \\nyngkid        50.136466   54.789835  0.9151   0.36058    \\nmarr          54.071604   46.920123  1.1524   0.24968    \\nunion         27.018684   43.044039  0.6277   0.53048    \\nlog(hrwage)   -2.726776   32.202444 -0.0847   0.93255'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "date_sl = '''Estimate Std.Error t value  Pr(>|t|)    \n",
    "(Intercept) 3431.803558   96.309432 35.6331 < 2.2e-16 ***\n",
    "totwrk        -0.158079    0.020867 -7.5755 1.639e-13 ***\n",
    "age            2.437082    1.671818  1.4577   0.14551    \n",
    "south         78.046123   45.287154  1.7234   0.08542 .  \n",
    "male          36.485386   43.350193  0.8416   0.40037    \n",
    "smsa         -34.964643   38.231919 -0.9145   0.36086    \n",
    "yngkid        50.136466   54.789835  0.9151   0.36058    \n",
    "marr          54.071604   46.920123  1.1524   0.24968    \n",
    "union         27.018684   43.044039  0.6277   0.53048    \n",
    "log(hrwage)   -2.726776   32.202444 -0.0847   0.93255'''\n",
    "date_sl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4ff80d2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>t</th>\n",
       "      <th>value</th>\n",
       "      <th>Pr(&gt;|t|)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(Intercept)</th>\n",
       "      <th>3431.803558</th>\n",
       "      <td>96.309432</td>\n",
       "      <td>35.6331</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>totwrk</th>\n",
       "      <th>-0.158079</th>\n",
       "      <td>0.020867</td>\n",
       "      <td>-7.5755</td>\n",
       "      <td>1.639e-13</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <th>2.437082</th>\n",
       "      <td>1.671818</td>\n",
       "      <td>1.4577</td>\n",
       "      <td>0.14551</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>south</th>\n",
       "      <th>78.046123</th>\n",
       "      <td>45.287154</td>\n",
       "      <td>1.7234</td>\n",
       "      <td>0.08542</td>\n",
       "      <td>.</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <th>36.485386</th>\n",
       "      <td>43.350193</td>\n",
       "      <td>0.8416</td>\n",
       "      <td>0.40037</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smsa</th>\n",
       "      <th>-34.964643</th>\n",
       "      <td>38.231919</td>\n",
       "      <td>-0.9145</td>\n",
       "      <td>0.36086</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yngkid</th>\n",
       "      <th>50.136466</th>\n",
       "      <td>54.789835</td>\n",
       "      <td>0.9151</td>\n",
       "      <td>0.36058</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>marr</th>\n",
       "      <th>54.071604</th>\n",
       "      <td>46.920123</td>\n",
       "      <td>1.1524</td>\n",
       "      <td>0.24968</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>union</th>\n",
       "      <th>27.018684</th>\n",
       "      <td>43.044039</td>\n",
       "      <td>0.6277</td>\n",
       "      <td>0.53048</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>log(hrwage)</th>\n",
       "      <th>-2.726776</th>\n",
       "      <td>32.202444</td>\n",
       "      <td>-0.0847</td>\n",
       "      <td>0.93255</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Estimate  Std.Error          t    value Pr(>|t|)\n",
       "(Intercept)  3431.803558  96.309432    35.6331          <  2.2e-16      ***\n",
       "totwrk      -0.158079      0.020867    -7.5755  1.639e-13      ***      NaN\n",
       "age          2.437082      1.671818     1.4577    0.14551      NaN      NaN\n",
       "south        78.046123    45.287154     1.7234    0.08542        .      NaN\n",
       "male         36.485386    43.350193     0.8416    0.40037      NaN      NaN\n",
       "smsa        -34.964643    38.231919    -0.9145    0.36086      NaN      NaN\n",
       "yngkid       50.136466    54.789835     0.9151    0.36058      NaN      NaN\n",
       "marr         54.071604    46.920123     1.1524    0.24968      NaN      NaN\n",
       "union        27.018684    43.044039     0.6277    0.53048      NaN      NaN\n",
       "log(hrwage) -2.726776     32.202444    -0.0847    0.93255      NaN      NaN"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(io.StringIO(date_sl), sep='\\s+')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "17cb7b62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>t</th>\n",
       "      <th>value</th>\n",
       "      <th>Pr(&gt;|t|)</th>\n",
       "      <th>znachimost</th>\n",
       "      <th>result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(Intercept)</th>\n",
       "      <th>3431.803558</th>\n",
       "      <td>96.309432</td>\n",
       "      <td>35.6331</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "      <td>2.702808</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>totwrk</th>\n",
       "      <th>-0.158079</th>\n",
       "      <td>0.020867</td>\n",
       "      <td>-7.5755</td>\n",
       "      <td>1.639e-13</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.002755</td>\n",
       "      <td>ne znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <th>2.437082</th>\n",
       "      <td>1.671818</td>\n",
       "      <td>1.4577</td>\n",
       "      <td>0.14551</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.146888</td>\n",
       "      <td>ne znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>south</th>\n",
       "      <th>78.046123</th>\n",
       "      <td>45.287154</td>\n",
       "      <td>1.7234</td>\n",
       "      <td>0.08542</td>\n",
       "      <td>.</td>\n",
       "      <td>NaN</td>\n",
       "      <td>26.277796</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <th>36.485386</th>\n",
       "      <td>43.350193</td>\n",
       "      <td>0.8416</td>\n",
       "      <td>0.40037</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>51.509260</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smsa</th>\n",
       "      <th>-34.964643</th>\n",
       "      <td>38.231919</td>\n",
       "      <td>-0.9145</td>\n",
       "      <td>0.36086</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.806363</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yngkid</th>\n",
       "      <th>50.136466</th>\n",
       "      <td>54.789835</td>\n",
       "      <td>0.9151</td>\n",
       "      <td>0.36058</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>59.873058</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>marr</th>\n",
       "      <th>54.071604</th>\n",
       "      <td>46.920123</td>\n",
       "      <td>1.1524</td>\n",
       "      <td>0.24968</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40.715136</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>union</th>\n",
       "      <th>27.018684</th>\n",
       "      <td>43.044039</td>\n",
       "      <td>0.6277</td>\n",
       "      <td>0.53048</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>68.574222</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>log(hrwage)</th>\n",
       "      <th>-2.726776</th>\n",
       "      <td>32.202444</td>\n",
       "      <td>-0.0847</td>\n",
       "      <td>0.93255</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>380.194144</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Estimate  Std.Error          t    value Pr(>|t|)  \\\n",
       "(Intercept)  3431.803558  96.309432    35.6331          <  2.2e-16      ***   \n",
       "totwrk      -0.158079      0.020867    -7.5755  1.639e-13      ***      NaN   \n",
       "age          2.437082      1.671818     1.4577    0.14551      NaN      NaN   \n",
       "south        78.046123    45.287154     1.7234    0.08542        .      NaN   \n",
       "male         36.485386    43.350193     0.8416    0.40037      NaN      NaN   \n",
       "smsa        -34.964643    38.231919    -0.9145    0.36086      NaN      NaN   \n",
       "yngkid       50.136466    54.789835     0.9151    0.36058      NaN      NaN   \n",
       "marr         54.071604    46.920123     1.1524    0.24968      NaN      NaN   \n",
       "union        27.018684    43.044039     0.6277    0.53048      NaN      NaN   \n",
       "log(hrwage) -2.726776     32.202444    -0.0847    0.93255      NaN      NaN   \n",
       "\n",
       "                          znachimost       result  \n",
       "(Intercept)  3431.803558    2.702808     znachimo  \n",
       "totwrk      -0.158079       0.002755  ne znachimo  \n",
       "age          2.437082       1.146888  ne znachimo  \n",
       "south        78.046123     26.277796     znachimo  \n",
       "male         36.485386     51.509260     znachimo  \n",
       "smsa        -34.964643     41.806363     znachimo  \n",
       "yngkid       50.136466     59.873058     znachimo  \n",
       "marr         54.071604     40.715136     znachimo  \n",
       "union        27.018684     68.574222     znachimo  \n",
       "log(hrwage) -2.726776     380.194144     znachimo  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['znachimost'] = np.abs(df['Estimate']/df['Std.Error'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "7477f0c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.647777943912296"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha = 0.1\n",
    "t_cr = stats.t.ppf(1-alpha/2, 532-10)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32bb4119",
   "metadata": {},
   "source": [
    "### Задача 1.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "5a124e73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Names Estimate Std.Error\\n(Intercept)    4.974      0.165\\nage            0.021      0.004\\nIQ             0.008      0.001\\nmarried        0.201      0.040\\nsouth         -0.099      0.027\\nurban          0.175      0.028'"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_wh ='''Names Estimate Std.Error\n",
    "(Intercept)    4.974      0.165\n",
    "age            0.021      0.004\n",
    "IQ             0.008      0.001\n",
    "married        0.201      0.040\n",
    "south         -0.099      0.027\n",
    "urban          0.175      0.028'''\n",
    "data_wh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "d143bf7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Names</th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Intercept)</td>\n",
       "      <td>4.974</td>\n",
       "      <td>0.165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>age</td>\n",
       "      <td>0.021</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IQ</td>\n",
       "      <td>0.008</td>\n",
       "      <td>0.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>married</td>\n",
       "      <td>0.201</td>\n",
       "      <td>0.040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>south</td>\n",
       "      <td>-0.099</td>\n",
       "      <td>0.027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>urban</td>\n",
       "      <td>0.175</td>\n",
       "      <td>0.028</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Names  Estimate  Std.Error\n",
       "0  (Intercept)     4.974      0.165\n",
       "1          age     0.021      0.004\n",
       "2           IQ     0.008      0.001\n",
       "3      married     0.201      0.040\n",
       "4        south    -0.099      0.027\n",
       "5        urban     0.175      0.028"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(io.StringIO(data_wh), sep='\\s+')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "c24ec3e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Names</th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>znachimost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Intercept)</td>\n",
       "      <td>4.974</td>\n",
       "      <td>0.165</td>\n",
       "      <td>30.145455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>age</td>\n",
       "      <td>0.021</td>\n",
       "      <td>0.004</td>\n",
       "      <td>5.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IQ</td>\n",
       "      <td>0.008</td>\n",
       "      <td>0.001</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>married</td>\n",
       "      <td>0.201</td>\n",
       "      <td>0.040</td>\n",
       "      <td>5.025000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>south</td>\n",
       "      <td>-0.099</td>\n",
       "      <td>0.027</td>\n",
       "      <td>3.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>urban</td>\n",
       "      <td>0.175</td>\n",
       "      <td>0.028</td>\n",
       "      <td>6.250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Names  Estimate  Std.Error  znachimost\n",
       "0  (Intercept)     4.974      0.165   30.145455\n",
       "1          age     0.021      0.004    5.250000\n",
       "2           IQ     0.008      0.001    8.000000\n",
       "3      married     0.201      0.040    5.025000\n",
       "4        south    -0.099      0.027    3.666667\n",
       "5        urban     0.175      0.028    6.250000"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['znachimost'] = np.abs(df['Estimate']/df['Std.Error'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "e0fca967",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.962518080381026"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha=0.05\n",
    "t_cr=stats.t.ppf(1-alpha/2, 936-6)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1099d13c",
   "metadata": {},
   "source": [
    "### Задача 1.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "b09e77cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Estimate  Std.Error t value  Pr(>|t|)    \\n(Intercept)  4.97400041  0.16544459 30.0644 < 2.2e-16 ***\\nage          0.02125292  0.00400766  5.3031 1.424e-07 ***\\nIQ           0.00820145  0.00084111  9.7508 < 2.2e-16 ***\\nmarried      0.20097997  0.04024862  4.9935 7.082e-07 ***\\nsouth       -0.09897822  0.02682522 -3.6897 0.0002375 ***\\nurban        0.17498055  0.02763721  6.3313 3.779e-10 ***'"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_wage = '''Estimate  Std.Error t value  Pr(>|t|)    \n",
    "(Intercept)  4.97400041  0.16544459 30.0644 < 2.2e-16 ***\n",
    "age          0.02125292  0.00400766  5.3031 1.424e-07 ***\n",
    "IQ           0.00820145  0.00084111  9.7508 < 2.2e-16 ***\n",
    "married      0.20097997  0.04024862  4.9935 7.082e-07 ***\n",
    "south       -0.09897822  0.02682522 -3.6897 0.0002375 ***\n",
    "urban        0.17498055  0.02763721  6.3313 3.779e-10 ***'''\n",
    "data_wage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "7e122a2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>t</th>\n",
       "      <th>value</th>\n",
       "      <th>Pr(&gt;|t|)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(Intercept)</th>\n",
       "      <th>4.974000</th>\n",
       "      <td>0.165</td>\n",
       "      <td>30.064</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <th>0.021253</th>\n",
       "      <td>0.004</td>\n",
       "      <td>5.303</td>\n",
       "      <td>1.424e-07</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IQ</th>\n",
       "      <th>0.008201</th>\n",
       "      <td>0.001</td>\n",
       "      <td>9.751</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>married</th>\n",
       "      <th>0.200980</th>\n",
       "      <td>0.040</td>\n",
       "      <td>4.994</td>\n",
       "      <td>7.082e-07</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>south</th>\n",
       "      <th>-0.098978</th>\n",
       "      <td>0.027</td>\n",
       "      <td>-3.690</td>\n",
       "      <td>0.0002375</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>urban</th>\n",
       "      <th>0.174981</th>\n",
       "      <td>0.028</td>\n",
       "      <td>6.331</td>\n",
       "      <td>3.779e-10</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Estimate  Std.Error          t    value Pr(>|t|)\n",
       "(Intercept)  4.974000     0.165     30.064          <  2.2e-16      ***\n",
       "age          0.021253     0.004      5.303  1.424e-07      ***      NaN\n",
       "IQ           0.008201     0.001      9.751          <  2.2e-16      ***\n",
       "married      0.200980     0.040      4.994  7.082e-07      ***      NaN\n",
       "south       -0.098978     0.027     -3.690  0.0002375      ***      NaN\n",
       "urban        0.174981     0.028      6.331  3.779e-10      ***      NaN"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(io.StringIO(data_wage), sep='\\s+')\n",
    "df.round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "9909fd6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>t</th>\n",
       "      <th>value</th>\n",
       "      <th>Pr(&gt;|t|)</th>\n",
       "      <th>znachimost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(Intercept)</th>\n",
       "      <th>4.974000</th>\n",
       "      <td>0.165</td>\n",
       "      <td>30.064</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <th>0.021253</th>\n",
       "      <td>0.004</td>\n",
       "      <td>5.303</td>\n",
       "      <td>1.424e-07</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IQ</th>\n",
       "      <th>0.008201</th>\n",
       "      <td>0.001</td>\n",
       "      <td>9.751</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>married</th>\n",
       "      <th>0.200980</th>\n",
       "      <td>0.040</td>\n",
       "      <td>4.994</td>\n",
       "      <td>7.082e-07</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>south</th>\n",
       "      <th>-0.098978</th>\n",
       "      <td>0.027</td>\n",
       "      <td>-3.690</td>\n",
       "      <td>0.0002375</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>urban</th>\n",
       "      <th>0.174981</th>\n",
       "      <td>0.028</td>\n",
       "      <td>6.331</td>\n",
       "      <td>3.779e-10</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Estimate  Std.Error          t    value Pr(>|t|)  \\\n",
       "(Intercept)  4.974000     0.165     30.064          <  2.2e-16      ***   \n",
       "age          0.021253     0.004      5.303  1.424e-07      ***      NaN   \n",
       "IQ           0.008201     0.001      9.751          <  2.2e-16      ***   \n",
       "married      0.200980     0.040      4.994  7.082e-07      ***      NaN   \n",
       "south       -0.098978     0.027     -3.690  0.0002375      ***      NaN   \n",
       "urban        0.174981     0.028      6.331  3.779e-10      ***      NaN   \n",
       "\n",
       "                       znachimost  \n",
       "(Intercept)  4.974000       0.006  \n",
       "age          0.021253       0.001  \n",
       "IQ           0.008201       0.000  \n",
       "married      0.200980       0.008  \n",
       "south       -0.098978       0.007  \n",
       "urban        0.174981       0.004  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['znachimost'] = np.abs(df['Estimate']/df['Std.Error'])\n",
    "df.round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "e322bffd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.581126143762923"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cr = stats.t.ppf(1-0.005, 936-6)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "60a257db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>t</th>\n",
       "      <th>value</th>\n",
       "      <th>Pr(&gt;|t|)</th>\n",
       "      <th>znachimost</th>\n",
       "      <th>result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(Intercept)</th>\n",
       "      <th>4.974000</th>\n",
       "      <td>0.165445</td>\n",
       "      <td>30.0644</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "      <td>0.005503</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <th>0.021253</th>\n",
       "      <td>0.004008</td>\n",
       "      <td>5.3031</td>\n",
       "      <td>1.424e-07</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000756</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IQ</th>\n",
       "      <th>0.008201</th>\n",
       "      <td>0.000841</td>\n",
       "      <td>9.7508</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "      <td>0.000086</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>married</th>\n",
       "      <th>0.200980</th>\n",
       "      <td>0.040249</td>\n",
       "      <td>4.9935</td>\n",
       "      <td>7.082e-07</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.008060</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>south</th>\n",
       "      <th>-0.098978</th>\n",
       "      <td>0.026825</td>\n",
       "      <td>-3.6897</td>\n",
       "      <td>0.0002375</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.007270</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>urban</th>\n",
       "      <th>0.174981</th>\n",
       "      <td>0.027637</td>\n",
       "      <td>6.3313</td>\n",
       "      <td>3.779e-10</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.004365</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Estimate  Std.Error          t    value Pr(>|t|)  \\\n",
       "(Intercept)  4.974000  0.165445    30.0644          <  2.2e-16      ***   \n",
       "age          0.021253  0.004008     5.3031  1.424e-07      ***      NaN   \n",
       "IQ           0.008201  0.000841     9.7508          <  2.2e-16      ***   \n",
       "married      0.200980  0.040249     4.9935  7.082e-07      ***      NaN   \n",
       "south       -0.098978  0.026825    -3.6897  0.0002375      ***      NaN   \n",
       "urban        0.174981  0.027637     6.3313  3.779e-10      ***      NaN   \n",
       "\n",
       "                       znachimost       result  \n",
       "(Intercept)  4.974000    0.005503  ne_znachimo  \n",
       "age          0.021253    0.000756  ne_znachimo  \n",
       "IQ           0.008201    0.000086  ne_znachimo  \n",
       "married      0.200980    0.008060  ne_znachimo  \n",
       "south       -0.098978    0.007270  ne_znachimo  \n",
       "urban        0.174981    0.004365  ne_znachimo  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['result'] = df.apply(lambda x: 'znachimo' if np.abs(x['znachimost']) > t_cr else 'ne_znachimo', axis=1 )\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04f9141d",
   "metadata": {},
   "source": [
    "### Задача 1.5\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "5240e3b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Names Estimate Std.Error\\n(Intercept)    1.250      0.061\\nexper          0.037      0.006\\nI(exper^2)    -0.001      0.000\\nfemale        -0.363      0.040\\nmarried        0.144      0.045\\nsmsa           0.273      0.044'"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_wageone = '''Names Estimate Std.Error\n",
    "(Intercept)    1.250      0.061\n",
    "exper          0.037      0.006\n",
    "I(exper^2)    -0.001      0.000\n",
    "female        -0.363      0.040\n",
    "married        0.144      0.045\n",
    "smsa           0.273      0.044'''\n",
    "data_wageone"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "2f031bce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Names</th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Intercept)</td>\n",
       "      <td>1.250</td>\n",
       "      <td>0.061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>exper</td>\n",
       "      <td>0.037</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>I(exper^2)</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>female</td>\n",
       "      <td>-0.363</td>\n",
       "      <td>0.040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>married</td>\n",
       "      <td>0.144</td>\n",
       "      <td>0.045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>smsa</td>\n",
       "      <td>0.273</td>\n",
       "      <td>0.044</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Names  Estimate  Std.Error\n",
       "0  (Intercept)     1.250      0.061\n",
       "1        exper     0.037      0.006\n",
       "2   I(exper^2)    -0.001      0.000\n",
       "3       female    -0.363      0.040\n",
       "4      married     0.144      0.045\n",
       "5         smsa     0.273      0.044"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(io.StringIO(data_wageone), sep='\\s+')\n",
    "df.round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "e4970873",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Names</th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>znachimost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Intercept)</td>\n",
       "      <td>1.250</td>\n",
       "      <td>0.061</td>\n",
       "      <td>20.491803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>exper</td>\n",
       "      <td>0.037</td>\n",
       "      <td>0.006</td>\n",
       "      <td>6.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>I(exper^2)</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>0.000</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>female</td>\n",
       "      <td>-0.363</td>\n",
       "      <td>0.040</td>\n",
       "      <td>9.075000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>married</td>\n",
       "      <td>0.144</td>\n",
       "      <td>0.045</td>\n",
       "      <td>3.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>smsa</td>\n",
       "      <td>0.273</td>\n",
       "      <td>0.044</td>\n",
       "      <td>6.204545</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Names  Estimate  Std.Error  znachimost\n",
       "0  (Intercept)     1.250      0.061   20.491803\n",
       "1        exper     0.037      0.006    6.166667\n",
       "2   I(exper^2)    -0.001      0.000         inf\n",
       "3       female    -0.363      0.040    9.075000\n",
       "4      married     0.144      0.045    3.200000\n",
       "5         smsa     0.273      0.044    6.204545"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['znachimost'] = np.abs(df['Estimate']/df['Std.Error'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "2f466fbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.9645277045422598"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha=0.05\n",
    "t_cr=stats.t.ppf(1-alpha/2, 527-6)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ecc3cc1",
   "metadata": {},
   "source": [
    "### Задача 1.6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "d54581a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Estimate  Std.Error t value  Pr(>|t|)    \\n(Intercept)  1.25042289  0.06140967 20.3620 < 2.2e-16 ***\\nexper        0.03687966  0.00569646  6.4741 2.209e-10 ***\\nI(exper^2)  -0.00077167  0.00012195 -6.3280 5.366e-10 ***\\nfemale      -0.36273973  0.03974402 -9.1269 < 2.2e-16 ***\\nmarried      0.14378405  0.04549137  3.1607  0.001666 ** \\nsmsa         0.27256198  0.04411563  6.1784 1.308e-09 ***'"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_wageone = '''Estimate  Std.Error t value  Pr(>|t|)    \n",
    "(Intercept)  1.25042289  0.06140967 20.3620 < 2.2e-16 ***\n",
    "exper        0.03687966  0.00569646  6.4741 2.209e-10 ***\n",
    "I(exper^2)  -0.00077167  0.00012195 -6.3280 5.366e-10 ***\n",
    "female      -0.36273973  0.03974402 -9.1269 < 2.2e-16 ***\n",
    "married      0.14378405  0.04549137  3.1607  0.001666 ** \n",
    "smsa         0.27256198  0.04411563  6.1784 1.308e-09 ***'''\n",
    "data_wageone"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "10873190",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>t</th>\n",
       "      <th>value</th>\n",
       "      <th>Pr(&gt;|t|)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(Intercept)</th>\n",
       "      <th>1.250423</th>\n",
       "      <td>0.061410</td>\n",
       "      <td>20.3620</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exper</th>\n",
       "      <th>0.036880</th>\n",
       "      <td>0.005696</td>\n",
       "      <td>6.4741</td>\n",
       "      <td>2.209e-10</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>I(exper^2)</th>\n",
       "      <th>-0.000772</th>\n",
       "      <td>0.000122</td>\n",
       "      <td>-6.3280</td>\n",
       "      <td>5.366e-10</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>female</th>\n",
       "      <th>-0.362740</th>\n",
       "      <td>0.039744</td>\n",
       "      <td>-9.1269</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>married</th>\n",
       "      <th>0.143784</th>\n",
       "      <td>0.045491</td>\n",
       "      <td>3.1607</td>\n",
       "      <td>0.001666</td>\n",
       "      <td>**</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smsa</th>\n",
       "      <th>0.272562</th>\n",
       "      <td>0.044116</td>\n",
       "      <td>6.1784</td>\n",
       "      <td>1.308e-09</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Estimate  Std.Error          t    value Pr(>|t|)\n",
       "(Intercept)  1.250423  0.061410    20.3620          <  2.2e-16      ***\n",
       "exper        0.036880  0.005696     6.4741  2.209e-10      ***      NaN\n",
       "I(exper^2)  -0.000772  0.000122    -6.3280  5.366e-10      ***      NaN\n",
       "female      -0.362740  0.039744    -9.1269          <  2.2e-16      ***\n",
       "married      0.143784  0.045491     3.1607   0.001666       **      NaN\n",
       "smsa         0.272562  0.044116     6.1784  1.308e-09      ***      NaN"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(io.StringIO(data_wageone), sep='\\s+')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "a1c6270c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>t</th>\n",
       "      <th>value</th>\n",
       "      <th>Pr(&gt;|t|)</th>\n",
       "      <th>znachimost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(Intercept)</th>\n",
       "      <th>1.250423</th>\n",
       "      <td>0.061</td>\n",
       "      <td>20.362</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "      <td>0.003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exper</th>\n",
       "      <th>0.036880</th>\n",
       "      <td>0.006</td>\n",
       "      <td>6.474</td>\n",
       "      <td>2.209e-10</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>I(exper^2)</th>\n",
       "      <th>-0.000772</th>\n",
       "      <td>0.000</td>\n",
       "      <td>-6.328</td>\n",
       "      <td>5.366e-10</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>female</th>\n",
       "      <th>-0.362740</th>\n",
       "      <td>0.040</td>\n",
       "      <td>-9.127</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>married</th>\n",
       "      <th>0.143784</th>\n",
       "      <td>0.045</td>\n",
       "      <td>3.161</td>\n",
       "      <td>0.001666</td>\n",
       "      <td>**</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smsa</th>\n",
       "      <th>0.272562</th>\n",
       "      <td>0.044</td>\n",
       "      <td>6.178</td>\n",
       "      <td>1.308e-09</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.007</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Estimate  Std.Error          t    value Pr(>|t|)  \\\n",
       "(Intercept)  1.250423     0.061     20.362          <  2.2e-16      ***   \n",
       "exper        0.036880     0.006      6.474  2.209e-10      ***      NaN   \n",
       "I(exper^2)  -0.000772     0.000     -6.328  5.366e-10      ***      NaN   \n",
       "female      -0.362740     0.040     -9.127          <  2.2e-16      ***   \n",
       "married      0.143784     0.045      3.161   0.001666       **      NaN   \n",
       "smsa         0.272562     0.044      6.178  1.308e-09      ***      NaN   \n",
       "\n",
       "                       znachimost  \n",
       "(Intercept)  1.250423       0.003  \n",
       "exper        0.036880       0.001  \n",
       "I(exper^2)  -0.000772       0.000  \n",
       "female      -0.362740       0.004  \n",
       "married      0.143784       0.014  \n",
       "smsa         0.272562       0.007  "
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['znachimost'] = np.abs(df['Estimate']/df['Std.Error'])\n",
    "df.round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "b42310ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.9645365010317144"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha=0.05\n",
    "t_cr=stats.t.ppf(1-alpha/2, 526-6)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "1eef773b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>t</th>\n",
       "      <th>value</th>\n",
       "      <th>Pr(&gt;|t|)</th>\n",
       "      <th>znachimost</th>\n",
       "      <th>result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(Intercept)</th>\n",
       "      <th>1.250423</th>\n",
       "      <td>0.061410</td>\n",
       "      <td>20.3620</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "      <td>0.003016</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exper</th>\n",
       "      <th>0.036880</th>\n",
       "      <td>0.005696</td>\n",
       "      <td>6.4741</td>\n",
       "      <td>2.209e-10</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000880</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>I(exper^2)</th>\n",
       "      <th>-0.000772</th>\n",
       "      <td>0.000122</td>\n",
       "      <td>-6.3280</td>\n",
       "      <td>5.366e-10</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000019</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>female</th>\n",
       "      <th>-0.362740</th>\n",
       "      <td>0.039744</td>\n",
       "      <td>-9.1269</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.2e-16</td>\n",
       "      <td>***</td>\n",
       "      <td>0.004355</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>married</th>\n",
       "      <th>0.143784</th>\n",
       "      <td>0.045491</td>\n",
       "      <td>3.1607</td>\n",
       "      <td>0.001666</td>\n",
       "      <td>**</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.014393</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smsa</th>\n",
       "      <th>0.272562</th>\n",
       "      <td>0.044116</td>\n",
       "      <td>6.1784</td>\n",
       "      <td>1.308e-09</td>\n",
       "      <td>***</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.007140</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Estimate  Std.Error          t    value Pr(>|t|)  \\\n",
       "(Intercept)  1.250423  0.061410    20.3620          <  2.2e-16      ***   \n",
       "exper        0.036880  0.005696     6.4741  2.209e-10      ***      NaN   \n",
       "I(exper^2)  -0.000772  0.000122    -6.3280  5.366e-10      ***      NaN   \n",
       "female      -0.362740  0.039744    -9.1269          <  2.2e-16      ***   \n",
       "married      0.143784  0.045491     3.1607   0.001666       **      NaN   \n",
       "smsa         0.272562  0.044116     6.1784  1.308e-09      ***      NaN   \n",
       "\n",
       "                       znachimost       result  \n",
       "(Intercept)  1.250423    0.003016  ne_znachimo  \n",
       "exper        0.036880    0.000880  ne_znachimo  \n",
       "I(exper^2)  -0.000772    0.000019  ne_znachimo  \n",
       "female      -0.362740    0.004355  ne_znachimo  \n",
       "married      0.143784    0.014393  ne_znachimo  \n",
       "smsa         0.272562    0.007140  ne_znachimo  "
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['result'] = df.apply(lambda x: 'znachimo' if np.abs(x['znachimost']) > t_critil else 'ne_znachimo', axis=1 )\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2916dcce",
   "metadata": {},
   "source": [
    "### Задача 1.7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "69af5877",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Names Estimate Std.Error\\n(Intercept)   -7.472      1.063\\nlog(q)         0.838      0.009\\nlog(pl)        0.044      0.106\\nlog(pk)        0.188      0.087\\nlog(pf)        0.713      0.064'"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_bb = '''Names Estimate Std.Error\n",
    "(Intercept)   -7.472      1.063\n",
    "log(q)         0.838      0.009\n",
    "log(pl)        0.044      0.106\n",
    "log(pk)        0.188      0.087\n",
    "log(pf)        0.713      0.064'''\n",
    "data_bb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "d7fd3008",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Names</th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Intercept)</td>\n",
       "      <td>-7.472</td>\n",
       "      <td>1.063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>log(q)</td>\n",
       "      <td>0.838</td>\n",
       "      <td>0.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>log(pl)</td>\n",
       "      <td>0.044</td>\n",
       "      <td>0.106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>log(pk)</td>\n",
       "      <td>0.188</td>\n",
       "      <td>0.087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>log(pf)</td>\n",
       "      <td>0.713</td>\n",
       "      <td>0.064</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Names  Estimate  Std.Error\n",
       "0  (Intercept)    -7.472      1.063\n",
       "1       log(q)     0.838      0.009\n",
       "2      log(pl)     0.044      0.106\n",
       "3      log(pk)     0.188      0.087\n",
       "4      log(pf)     0.713      0.064"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(io.StringIO(data_bb), sep='\\s+')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "e66e4748",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Names</th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>znachimost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Intercept)</td>\n",
       "      <td>-7.472</td>\n",
       "      <td>1.063</td>\n",
       "      <td>7.029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>log(q)</td>\n",
       "      <td>0.838</td>\n",
       "      <td>0.009</td>\n",
       "      <td>93.111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>log(pl)</td>\n",
       "      <td>0.044</td>\n",
       "      <td>0.106</td>\n",
       "      <td>0.415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>log(pk)</td>\n",
       "      <td>0.188</td>\n",
       "      <td>0.087</td>\n",
       "      <td>2.161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>log(pf)</td>\n",
       "      <td>0.713</td>\n",
       "      <td>0.064</td>\n",
       "      <td>11.141</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Names  Estimate  Std.Error  znachimost\n",
       "0  (Intercept)    -7.472      1.063       7.029\n",
       "1       log(q)     0.838      0.009      93.111\n",
       "2      log(pl)     0.044      0.106       0.415\n",
       "3      log(pk)     0.188      0.087       2.161\n",
       "4      log(pf)     0.713      0.064      11.141"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['znachimost'] = np.abs(df['Estimate']/df['Std.Error'])\n",
    "df.round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "ea0db91c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.9754880582258318"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha=0.05\n",
    "t_cr=stats.t.ppf(1-alpha/2, 159-5)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b4c9274",
   "metadata": {},
   "source": [
    "### Задача 1.8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "92ac40b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Names Estimate Std.Error t value  Pr(>|t|)    \\n(Intercept) -7.472227   1.063238 -7.0278 6.491e-11\\nlog(q)       0.838111   0.009387 89.2845 < 2.2e-16\\nlog(pl)      0.044258   0.105820  0.4182   0.67636    \\nlog(pk)      0.188449   0.087067  2.1644   0.03198  \\nlog(pf)      0.713098   0.064355 11.0806 < 2.2e-16'"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cost = '''Names Estimate Std.Error t value  Pr(>|t|)    \n",
    "(Intercept) -7.472227   1.063238 -7.0278 6.491e-11\n",
    "log(q)       0.838111   0.009387 89.2845 < 2.2e-16\n",
    "log(pl)      0.044258   0.105820  0.4182   0.67636    \n",
    "log(pk)      0.188449   0.087067  2.1644   0.03198  \n",
    "log(pf)      0.713098   0.064355 11.0806 < 2.2e-16'''\n",
    "data_cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "d1784fb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Names</th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>t</th>\n",
       "      <th>value</th>\n",
       "      <th>Pr(&gt;|t|)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Intercept)</td>\n",
       "      <td>-7.472227</td>\n",
       "      <td>1.063238</td>\n",
       "      <td>-7.0278</td>\n",
       "      <td>6.491e-11</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>log(q)</td>\n",
       "      <td>0.838111</td>\n",
       "      <td>0.009387</td>\n",
       "      <td>89.2845</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.200000e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>log(pl)</td>\n",
       "      <td>0.044258</td>\n",
       "      <td>0.105820</td>\n",
       "      <td>0.4182</td>\n",
       "      <td>0.67636</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>log(pk)</td>\n",
       "      <td>0.188449</td>\n",
       "      <td>0.087067</td>\n",
       "      <td>2.1644</td>\n",
       "      <td>0.03198</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>log(pf)</td>\n",
       "      <td>0.713098</td>\n",
       "      <td>0.064355</td>\n",
       "      <td>11.0806</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.200000e-16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Names  Estimate  Std.Error        t      value      Pr(>|t|)\n",
       "0  (Intercept) -7.472227   1.063238  -7.0278  6.491e-11           NaN\n",
       "1       log(q)  0.838111   0.009387  89.2845          <  2.200000e-16\n",
       "2      log(pl)  0.044258   0.105820   0.4182    0.67636           NaN\n",
       "3      log(pk)  0.188449   0.087067   2.1644    0.03198           NaN\n",
       "4      log(pf)  0.713098   0.064355  11.0806          <  2.200000e-16"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(io.StringIO(data_cost), sep='\\s+')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "e066d413",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Names</th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>t</th>\n",
       "      <th>value</th>\n",
       "      <th>Pr(&gt;|t|)</th>\n",
       "      <th>znachimost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Intercept)</td>\n",
       "      <td>-7.472</td>\n",
       "      <td>1.063</td>\n",
       "      <td>-7.028</td>\n",
       "      <td>6.491e-11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>log(q)</td>\n",
       "      <td>0.838</td>\n",
       "      <td>0.009</td>\n",
       "      <td>89.284</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>0.0</td>\n",
       "      <td>89.284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>log(pl)</td>\n",
       "      <td>0.044</td>\n",
       "      <td>0.106</td>\n",
       "      <td>0.418</td>\n",
       "      <td>0.67636</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>log(pk)</td>\n",
       "      <td>0.188</td>\n",
       "      <td>0.087</td>\n",
       "      <td>2.164</td>\n",
       "      <td>0.03198</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>log(pf)</td>\n",
       "      <td>0.713</td>\n",
       "      <td>0.064</td>\n",
       "      <td>11.081</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.081</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Names  Estimate  Std.Error       t      value  Pr(>|t|)  znachimost\n",
       "0  (Intercept)    -7.472      1.063  -7.028  6.491e-11       NaN       7.028\n",
       "1       log(q)     0.838      0.009  89.284          <       0.0      89.284\n",
       "2      log(pl)     0.044      0.106   0.418    0.67636       NaN       0.418\n",
       "3      log(pk)     0.188      0.087   2.164    0.03198       NaN       2.164\n",
       "4      log(pf)     0.713      0.064  11.081          <       0.0      11.081"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['znachimost'] = np.abs(df['Estimate']/df['Std.Error'])\n",
    "df.round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "42c57053",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.608344423122931"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha=0.01\n",
    "t_cr=stats.t.ppf(1-alpha/2, 158-5)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "68e6adf8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Names</th>\n",
       "      <th>Estimate</th>\n",
       "      <th>Std.Error</th>\n",
       "      <th>t</th>\n",
       "      <th>value</th>\n",
       "      <th>Pr(&gt;|t|)</th>\n",
       "      <th>znachimost</th>\n",
       "      <th>result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Intercept)</td>\n",
       "      <td>-7.472227</td>\n",
       "      <td>1.063238</td>\n",
       "      <td>-7.0278</td>\n",
       "      <td>6.491e-11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.027803</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>log(q)</td>\n",
       "      <td>0.838111</td>\n",
       "      <td>0.009387</td>\n",
       "      <td>89.2845</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.200000e-16</td>\n",
       "      <td>89.284223</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>log(pl)</td>\n",
       "      <td>0.044258</td>\n",
       "      <td>0.105820</td>\n",
       "      <td>0.4182</td>\n",
       "      <td>0.67636</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.418239</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>log(pk)</td>\n",
       "      <td>0.188449</td>\n",
       "      <td>0.087067</td>\n",
       "      <td>2.1644</td>\n",
       "      <td>0.03198</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.164414</td>\n",
       "      <td>ne_znachimo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>log(pf)</td>\n",
       "      <td>0.713098</td>\n",
       "      <td>0.064355</td>\n",
       "      <td>11.0806</td>\n",
       "      <td>&lt;</td>\n",
       "      <td>2.200000e-16</td>\n",
       "      <td>11.080693</td>\n",
       "      <td>znachimo</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Names  Estimate  Std.Error        t      value      Pr(>|t|)  \\\n",
       "0  (Intercept) -7.472227   1.063238  -7.0278  6.491e-11           NaN   \n",
       "1       log(q)  0.838111   0.009387  89.2845          <  2.200000e-16   \n",
       "2      log(pl)  0.044258   0.105820   0.4182    0.67636           NaN   \n",
       "3      log(pk)  0.188449   0.087067   2.1644    0.03198           NaN   \n",
       "4      log(pf)  0.713098   0.064355  11.0806          <  2.200000e-16   \n",
       "\n",
       "   znachimost       result  \n",
       "0    7.027803     znachimo  \n",
       "1   89.284223     znachimo  \n",
       "2    0.418239  ne_znachimo  \n",
       "3    2.164414  ne_znachimo  \n",
       "4   11.080693     znachimo  "
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['result'] = df.apply(lambda x: 'znachimo' if np.abs(x['znachimost']) > t_cr else 'ne_znachimo', axis=1 )\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3815ce57",
   "metadata": {},
   "source": [
    "### Задача 2.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "a46b6270",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>capital</th>\n",
       "      <th>labour</th>\n",
       "      <th>output</th>\n",
       "      <th>wage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.606563</td>\n",
       "      <td>184</td>\n",
       "      <td>9.250759</td>\n",
       "      <td>43.080307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.323237</td>\n",
       "      <td>91</td>\n",
       "      <td>3.664310</td>\n",
       "      <td>27.780016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22.093692</td>\n",
       "      <td>426</td>\n",
       "      <td>28.781516</td>\n",
       "      <td>44.467748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10.737851</td>\n",
       "      <td>72</td>\n",
       "      <td>4.124642</td>\n",
       "      <td>39.734710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.161365</td>\n",
       "      <td>46</td>\n",
       "      <td>2.890150</td>\n",
       "      <td>34.650709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>564</th>\n",
       "      <td>2.625403</td>\n",
       "      <td>20</td>\n",
       "      <td>1.424376</td>\n",
       "      <td>33.477545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>565</th>\n",
       "      <td>1.276386</td>\n",
       "      <td>61</td>\n",
       "      <td>2.109048</td>\n",
       "      <td>26.300732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>566</th>\n",
       "      <td>1.953869</td>\n",
       "      <td>117</td>\n",
       "      <td>6.241870</td>\n",
       "      <td>41.153979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>567</th>\n",
       "      <td>1.318527</td>\n",
       "      <td>46</td>\n",
       "      <td>7.902237</td>\n",
       "      <td>66.720139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568</th>\n",
       "      <td>2.832391</td>\n",
       "      <td>161</td>\n",
       "      <td>6.804085</td>\n",
       "      <td>36.618435</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>569 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       capital  labour     output       wage\n",
       "0     2.606563     184   9.250759  43.080307\n",
       "1     1.323237      91   3.664310  27.780016\n",
       "2    22.093692     426  28.781516  44.467748\n",
       "3    10.737851      72   4.124642  39.734710\n",
       "4     1.161365      46   2.890150  34.650709\n",
       "..         ...     ...        ...        ...\n",
       "564   2.625403      20   1.424376  33.477545\n",
       "565   1.276386      61   2.109048  26.300732\n",
       "566   1.953869     117   6.241870  41.153979\n",
       "567   1.318527      46   7.902237  66.720139\n",
       "568   2.832391     161   6.804085  36.618435\n",
       "\n",
       "[569 rows x 4 columns]"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2=pd.read_csv('https://raw.githubusercontent.com/artamonoff/Econometrica/master/python-notebooks/data-csv/Labour.csv')\n",
    "data2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "53aec88b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.005</th>    <th>0.995]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>       <td>   -1.7115</td> <td>    0.097</td> <td>  -17.697</td> <td> 0.000</td> <td>   -1.961</td> <td>   -1.462</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(capital)</th> <td>    0.2076</td> <td>    0.017</td> <td>   12.077</td> <td> 0.000</td> <td>    0.163</td> <td>    0.252</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(labour)</th>  <td>    0.7148</td> <td>    0.023</td> <td>   30.890</td> <td> 0.000</td> <td>    0.655</td> <td>    0.775</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = smf.ols(data=data2, formula = 'np.log(output)~np.log(capital)+np.log(labour)').fit()\n",
    "model.summary(alpha = 0.01).tables[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "80e6b757",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "                             Test for Constraints                             \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "c0             0.2076      0.017    -17.014      0.000       0.174       0.241\n",
       "=============================================================================="
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.t_test('np.log(capital)=0.5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "bd711843",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "569"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "d17e340a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.584543428450176"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cr = stats.t.ppf(1-0.01/2, len(data2)-3)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "c02928a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17.2"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta_cap = 0.2076\n",
    "st_err = 0.017\n",
    "t_nab = np.abs((beta_cap-0.5)/st_err)\n",
    "t_nab"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a886e0b",
   "metadata": {},
   "source": [
    "### Критическое значение Стьюдента меньше наблюдаемого, коэффициент np.log(capital) сильно отличается от 0.2076"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "611bc9b5",
   "metadata": {},
   "source": [
    "### Задача 2.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "80db492e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>capital</th>\n",
       "      <th>labour</th>\n",
       "      <th>output</th>\n",
       "      <th>wage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.606563</td>\n",
       "      <td>184</td>\n",
       "      <td>9.250759</td>\n",
       "      <td>43.080307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.323237</td>\n",
       "      <td>91</td>\n",
       "      <td>3.664310</td>\n",
       "      <td>27.780016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22.093692</td>\n",
       "      <td>426</td>\n",
       "      <td>28.781516</td>\n",
       "      <td>44.467748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10.737851</td>\n",
       "      <td>72</td>\n",
       "      <td>4.124642</td>\n",
       "      <td>39.734710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.161365</td>\n",
       "      <td>46</td>\n",
       "      <td>2.890150</td>\n",
       "      <td>34.650709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>564</th>\n",
       "      <td>2.625403</td>\n",
       "      <td>20</td>\n",
       "      <td>1.424376</td>\n",
       "      <td>33.477545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>565</th>\n",
       "      <td>1.276386</td>\n",
       "      <td>61</td>\n",
       "      <td>2.109048</td>\n",
       "      <td>26.300732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>566</th>\n",
       "      <td>1.953869</td>\n",
       "      <td>117</td>\n",
       "      <td>6.241870</td>\n",
       "      <td>41.153979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>567</th>\n",
       "      <td>1.318527</td>\n",
       "      <td>46</td>\n",
       "      <td>7.902237</td>\n",
       "      <td>66.720139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568</th>\n",
       "      <td>2.832391</td>\n",
       "      <td>161</td>\n",
       "      <td>6.804085</td>\n",
       "      <td>36.618435</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>569 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       capital  labour     output       wage\n",
       "0     2.606563     184   9.250759  43.080307\n",
       "1     1.323237      91   3.664310  27.780016\n",
       "2    22.093692     426  28.781516  44.467748\n",
       "3    10.737851      72   4.124642  39.734710\n",
       "4     1.161365      46   2.890150  34.650709\n",
       "..         ...     ...        ...        ...\n",
       "564   2.625403      20   1.424376  33.477545\n",
       "565   1.276386      61   2.109048  26.300732\n",
       "566   1.953869     117   6.241870  41.153979\n",
       "567   1.318527      46   7.902237  66.720139\n",
       "568   2.832391     161   6.804085  36.618435\n",
       "\n",
       "[569 rows x 4 columns]"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data3=pd.read_csv('https://raw.githubusercontent.com/artamonoff/Econometrica/master/python-notebooks/data-csv/Labour.csv')\n",
    "data3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "a259bd11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.005</th>    <th>0.995]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>       <td>   -1.7115</td> <td>    0.097</td> <td>  -17.697</td> <td> 0.000</td> <td>   -1.961</td> <td>   -1.462</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(capital)</th> <td>    0.2076</td> <td>    0.017</td> <td>   12.077</td> <td> 0.000</td> <td>    0.163</td> <td>    0.252</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(labour)</th>  <td>    0.7148</td> <td>    0.023</td> <td>   30.890</td> <td> 0.000</td> <td>    0.655</td> <td>    0.775</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = smf.ols(data=data3, formula = 'np.log(output)~np.log(capital)+np.log(labour)').fit()\n",
    "model.summary(alpha = 0.01).tables[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "3e47893a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "                             Test for Constraints                             \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "c0             0.7148      0.023      0.642      0.521       0.669       0.760\n",
       "=============================================================================="
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.t_test('np.log(labour)=0.7')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "46d108c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "569"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "bebe4aba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.647550237218224"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cr = stats.t.ppf(1-0.1/2, len(data3)-3)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "54ff847e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6434782608695667"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta_cap = 0.7148\n",
    "st_err = 0.023\n",
    "t_nab = np.abs((beta_cap-0.7)/st_err)\n",
    "t_nab"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0565182b",
   "metadata": {},
   "source": [
    "### Критическое значение Стьюдента больше наблюдаемого, коэффициент np.log(labour) несильно отличается от 0.7148"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84c4f793",
   "metadata": {},
   "source": [
    "### Задача 2.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "86f8a873",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cost</th>\n",
       "      <th>q</th>\n",
       "      <th>pl</th>\n",
       "      <th>sl</th>\n",
       "      <th>pk</th>\n",
       "      <th>sk</th>\n",
       "      <th>pf</th>\n",
       "      <th>sf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.2130</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6869.47</td>\n",
       "      <td>0.3291</td>\n",
       "      <td>64.945</td>\n",
       "      <td>0.4197</td>\n",
       "      <td>18.000</td>\n",
       "      <td>0.2512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0427</td>\n",
       "      <td>869.0</td>\n",
       "      <td>8372.96</td>\n",
       "      <td>0.1030</td>\n",
       "      <td>68.227</td>\n",
       "      <td>0.2913</td>\n",
       "      <td>21.067</td>\n",
       "      <td>0.6057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9.4059</td>\n",
       "      <td>1412.0</td>\n",
       "      <td>7960.90</td>\n",
       "      <td>0.0891</td>\n",
       "      <td>40.692</td>\n",
       "      <td>0.1567</td>\n",
       "      <td>41.530</td>\n",
       "      <td>0.7542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.7606</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8971.89</td>\n",
       "      <td>0.2802</td>\n",
       "      <td>41.243</td>\n",
       "      <td>0.1282</td>\n",
       "      <td>28.539</td>\n",
       "      <td>0.5916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.2587</td>\n",
       "      <td>295.0</td>\n",
       "      <td>8218.40</td>\n",
       "      <td>0.1772</td>\n",
       "      <td>71.940</td>\n",
       "      <td>0.1623</td>\n",
       "      <td>39.200</td>\n",
       "      <td>0.6606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>6.8293</td>\n",
       "      <td>946.6</td>\n",
       "      <td>10642.16</td>\n",
       "      <td>0.0883</td>\n",
       "      <td>43.600</td>\n",
       "      <td>0.1914</td>\n",
       "      <td>51.463</td>\n",
       "      <td>0.7203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>3.7605</td>\n",
       "      <td>377.0</td>\n",
       "      <td>7432.24</td>\n",
       "      <td>0.2117</td>\n",
       "      <td>74.120</td>\n",
       "      <td>0.2274</td>\n",
       "      <td>33.436</td>\n",
       "      <td>0.5609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>3.9822</td>\n",
       "      <td>391.0</td>\n",
       "      <td>5826.04</td>\n",
       "      <td>0.1926</td>\n",
       "      <td>78.288</td>\n",
       "      <td>0.0924</td>\n",
       "      <td>44.633</td>\n",
       "      <td>0.7151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>30.1880</td>\n",
       "      <td>5317.0</td>\n",
       "      <td>9586.63</td>\n",
       "      <td>0.0845</td>\n",
       "      <td>78.008</td>\n",
       "      <td>0.2009</td>\n",
       "      <td>41.840</td>\n",
       "      <td>0.7147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>67.8562</td>\n",
       "      <td>15220.0</td>\n",
       "      <td>6986.09</td>\n",
       "      <td>0.1451</td>\n",
       "      <td>74.025</td>\n",
       "      <td>0.2596</td>\n",
       "      <td>25.662</td>\n",
       "      <td>0.5945</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>158 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        cost        q        pl      sl      pk      sk      pf      sf\n",
       "0     0.2130      8.0   6869.47  0.3291  64.945  0.4197  18.000  0.2512\n",
       "1     3.0427    869.0   8372.96  0.1030  68.227  0.2913  21.067  0.6057\n",
       "2     9.4059   1412.0   7960.90  0.0891  40.692  0.1567  41.530  0.7542\n",
       "3     0.7606     65.0   8971.89  0.2802  41.243  0.1282  28.539  0.5916\n",
       "4     2.2587    295.0   8218.40  0.1772  71.940  0.1623  39.200  0.6606\n",
       "..       ...      ...       ...     ...     ...     ...     ...     ...\n",
       "153   6.8293    946.6  10642.16  0.0883  43.600  0.1914  51.463  0.7203\n",
       "154   3.7605    377.0   7432.24  0.2117  74.120  0.2274  33.436  0.5609\n",
       "155   3.9822    391.0   5826.04  0.1926  78.288  0.0924  44.633  0.7151\n",
       "156  30.1880   5317.0   9586.63  0.0845  78.008  0.2009  41.840  0.7147\n",
       "157  67.8562  15220.0   6986.09  0.1451  74.025  0.2596  25.662  0.5945\n",
       "\n",
       "[158 rows x 8 columns]"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_electr = pd.read_csv('https://raw.githubusercontent.com/artamonoff/Econometrica/master/python-notebooks/data-csv/Electricity.csv')\n",
    "data_electr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "f98a7c2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>  <td>   -7.4722</td> <td>    1.063</td> <td>   -7.028</td> <td> 0.000</td> <td>   -9.573</td> <td>   -5.372</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(q)</th>  <td>    0.8381</td> <td>    0.009</td> <td>   89.284</td> <td> 0.000</td> <td>    0.820</td> <td>    0.857</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(pl)</th> <td>    0.0443</td> <td>    0.106</td> <td>    0.418</td> <td> 0.676</td> <td>   -0.165</td> <td>    0.253</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(pk)</th> <td>    0.1884</td> <td>    0.087</td> <td>    2.164</td> <td> 0.032</td> <td>    0.016</td> <td>    0.360</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(pf)</th> <td>    0.7131</td> <td>    0.064</td> <td>   11.081</td> <td> 0.000</td> <td>    0.586</td> <td>    0.840</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = smf.ols(data=data_electr, formula = 'np.log(cost)~np.log(q)+np.log(pl)+np.log(pk)+np.log(pf)').fit()\n",
    "model.summary(alpha = 0.05).tables[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "e7043973",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "                             Test for Constraints                             \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "c0             0.8381      0.009    -17.246      0.000       0.820       0.857\n",
       "=============================================================================="
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.t_test('np.log(q)=1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "260e60ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "158"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data_electr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "af1107b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.9755903149964584"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cr = stats.t.ppf(1-0.05/2, len(data_electr)-5)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "e450718a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17.988888888888894"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta_cap = 0.8381\n",
    "st_err = 0.009\n",
    "t_nab = np.abs((beta_cap-1)/st_err)\n",
    "t_nab"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98816ea1",
   "metadata": {},
   "source": [
    "### Критическое значение Стьюдента меньше наблюдаемого, коэффициент np.log(q) сильно отличается от 0.8381"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c21d63fb",
   "metadata": {},
   "source": [
    "### Задача 2.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "ab8dfd45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cost</th>\n",
       "      <th>q</th>\n",
       "      <th>pl</th>\n",
       "      <th>sl</th>\n",
       "      <th>pk</th>\n",
       "      <th>sk</th>\n",
       "      <th>pf</th>\n",
       "      <th>sf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.2130</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6869.47</td>\n",
       "      <td>0.3291</td>\n",
       "      <td>64.945</td>\n",
       "      <td>0.4197</td>\n",
       "      <td>18.000</td>\n",
       "      <td>0.2512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0427</td>\n",
       "      <td>869.0</td>\n",
       "      <td>8372.96</td>\n",
       "      <td>0.1030</td>\n",
       "      <td>68.227</td>\n",
       "      <td>0.2913</td>\n",
       "      <td>21.067</td>\n",
       "      <td>0.6057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9.4059</td>\n",
       "      <td>1412.0</td>\n",
       "      <td>7960.90</td>\n",
       "      <td>0.0891</td>\n",
       "      <td>40.692</td>\n",
       "      <td>0.1567</td>\n",
       "      <td>41.530</td>\n",
       "      <td>0.7542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.7606</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8971.89</td>\n",
       "      <td>0.2802</td>\n",
       "      <td>41.243</td>\n",
       "      <td>0.1282</td>\n",
       "      <td>28.539</td>\n",
       "      <td>0.5916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.2587</td>\n",
       "      <td>295.0</td>\n",
       "      <td>8218.40</td>\n",
       "      <td>0.1772</td>\n",
       "      <td>71.940</td>\n",
       "      <td>0.1623</td>\n",
       "      <td>39.200</td>\n",
       "      <td>0.6606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>6.8293</td>\n",
       "      <td>946.6</td>\n",
       "      <td>10642.16</td>\n",
       "      <td>0.0883</td>\n",
       "      <td>43.600</td>\n",
       "      <td>0.1914</td>\n",
       "      <td>51.463</td>\n",
       "      <td>0.7203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>3.7605</td>\n",
       "      <td>377.0</td>\n",
       "      <td>7432.24</td>\n",
       "      <td>0.2117</td>\n",
       "      <td>74.120</td>\n",
       "      <td>0.2274</td>\n",
       "      <td>33.436</td>\n",
       "      <td>0.5609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>3.9822</td>\n",
       "      <td>391.0</td>\n",
       "      <td>5826.04</td>\n",
       "      <td>0.1926</td>\n",
       "      <td>78.288</td>\n",
       "      <td>0.0924</td>\n",
       "      <td>44.633</td>\n",
       "      <td>0.7151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>30.1880</td>\n",
       "      <td>5317.0</td>\n",
       "      <td>9586.63</td>\n",
       "      <td>0.0845</td>\n",
       "      <td>78.008</td>\n",
       "      <td>0.2009</td>\n",
       "      <td>41.840</td>\n",
       "      <td>0.7147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>67.8562</td>\n",
       "      <td>15220.0</td>\n",
       "      <td>6986.09</td>\n",
       "      <td>0.1451</td>\n",
       "      <td>74.025</td>\n",
       "      <td>0.2596</td>\n",
       "      <td>25.662</td>\n",
       "      <td>0.5945</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>158 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        cost        q        pl      sl      pk      sk      pf      sf\n",
       "0     0.2130      8.0   6869.47  0.3291  64.945  0.4197  18.000  0.2512\n",
       "1     3.0427    869.0   8372.96  0.1030  68.227  0.2913  21.067  0.6057\n",
       "2     9.4059   1412.0   7960.90  0.0891  40.692  0.1567  41.530  0.7542\n",
       "3     0.7606     65.0   8971.89  0.2802  41.243  0.1282  28.539  0.5916\n",
       "4     2.2587    295.0   8218.40  0.1772  71.940  0.1623  39.200  0.6606\n",
       "..       ...      ...       ...     ...     ...     ...     ...     ...\n",
       "153   6.8293    946.6  10642.16  0.0883  43.600  0.1914  51.463  0.7203\n",
       "154   3.7605    377.0   7432.24  0.2117  74.120  0.2274  33.436  0.5609\n",
       "155   3.9822    391.0   5826.04  0.1926  78.288  0.0924  44.633  0.7151\n",
       "156  30.1880   5317.0   9586.63  0.0845  78.008  0.2009  41.840  0.7147\n",
       "157  67.8562  15220.0   6986.09  0.1451  74.025  0.2596  25.662  0.5945\n",
       "\n",
       "[158 rows x 8 columns]"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_electr2 = pd.read_csv('https://raw.githubusercontent.com/artamonoff/Econometrica/master/python-notebooks/data-csv/Electricity.csv')\n",
    "data_electr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "919b1a4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>   <th>[0.05</th>     <th>0.95]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>  <td>   -7.4722</td> <td>    1.063</td> <td>   -7.028</td> <td> 0.000</td> <td>   -9.232</td> <td>   -5.713</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(q)</th>  <td>    0.8381</td> <td>    0.009</td> <td>   89.284</td> <td> 0.000</td> <td>    0.823</td> <td>    0.854</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(pl)</th> <td>    0.0443</td> <td>    0.106</td> <td>    0.418</td> <td> 0.676</td> <td>   -0.131</td> <td>    0.219</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(pk)</th> <td>    0.1884</td> <td>    0.087</td> <td>    2.164</td> <td> 0.032</td> <td>    0.044</td> <td>    0.333</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(pf)</th> <td>    0.7131</td> <td>    0.064</td> <td>   11.081</td> <td> 0.000</td> <td>    0.607</td> <td>    0.820</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = smf.ols(data=data_electr2, formula = 'np.log(cost)~np.log(q)+np.log(pl)+np.log(pk)+np.log(pf)').fit()\n",
    "model.summary(alpha = 0.1).tables[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "68e5b2e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "                             Test for Constraints                             \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "c0             0.7131      0.064     -4.458      0.000       0.586       0.840\n",
       "=============================================================================="
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.t_test('np.log(pf)=1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "f7fee59c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "158"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data_electr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "b5e15514",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.6548738467789963"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cr = stats.t.ppf(1-0.1/2, len(data_electr2)-5)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "014ec003",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.4828125000000005"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta_cap = 0.7131\n",
    "st_err = 0.064\n",
    "t_nab = np.abs((beta_cap-1)/st_err)\n",
    "t_nab"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f74fa072",
   "metadata": {},
   "source": [
    "### Критическое значение Стьюдента меньше наблюдаемого, коэффициент np.log(pf) сильно отличается от 0.7131"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f4fe63c",
   "metadata": {},
   "source": [
    "### Задача 2.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "41ead0ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>black</th>\n",
       "      <th>case</th>\n",
       "      <th>clerical</th>\n",
       "      <th>construc</th>\n",
       "      <th>educ</th>\n",
       "      <th>earns74</th>\n",
       "      <th>gdhlth</th>\n",
       "      <th>inlf</th>\n",
       "      <th>leis1</th>\n",
       "      <th>...</th>\n",
       "      <th>spwrk75</th>\n",
       "      <th>totwrk</th>\n",
       "      <th>union</th>\n",
       "      <th>worknrm</th>\n",
       "      <th>workscnd</th>\n",
       "      <th>exper</th>\n",
       "      <th>yngkid</th>\n",
       "      <th>yrsmarr</th>\n",
       "      <th>hrwage</th>\n",
       "      <th>agesq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3529</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>3438</td>\n",
       "      <td>0</td>\n",
       "      <td>3438</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>7.070004</td>\n",
       "      <td>1024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14</td>\n",
       "      <td>9500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2140</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>5020</td>\n",
       "      <td>0</td>\n",
       "      <td>5020</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.429999</td>\n",
       "      <td>961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>17</td>\n",
       "      <td>42500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4595</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2815</td>\n",
       "      <td>0</td>\n",
       "      <td>2815</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.529997</td>\n",
       "      <td>1936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12</td>\n",
       "      <td>42500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3211</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>3786</td>\n",
       "      <td>0</td>\n",
       "      <td>3786</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>9.619998</td>\n",
       "      <td>900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14</td>\n",
       "      <td>2500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4052</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2580</td>\n",
       "      <td>0</td>\n",
       "      <td>2580</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>2.750000</td>\n",
       "      <td>4096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>701</th>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>702</td>\n",
       "      <td>0.182331</td>\n",
       "      <td>0.030075</td>\n",
       "      <td>12</td>\n",
       "      <td>5500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5069</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2026</td>\n",
       "      <td>0</td>\n",
       "      <td>2026</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>702</th>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>703</td>\n",
       "      <td>0.182331</td>\n",
       "      <td>0.030075</td>\n",
       "      <td>10</td>\n",
       "      <td>2500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5885</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>675</td>\n",
       "      <td>1</td>\n",
       "      <td>465</td>\n",
       "      <td>210</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>703</th>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>704</td>\n",
       "      <td>0.182331</td>\n",
       "      <td>0.030075</td>\n",
       "      <td>12</td>\n",
       "      <td>3500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4719</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1851</td>\n",
       "      <td>0</td>\n",
       "      <td>1851</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>704</th>\n",
       "      <td>54</td>\n",
       "      <td>0</td>\n",
       "      <td>705</td>\n",
       "      <td>0.182331</td>\n",
       "      <td>0.030075</td>\n",
       "      <td>17</td>\n",
       "      <td>32500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5149</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1961</td>\n",
       "      <td>1</td>\n",
       "      <td>1481</td>\n",
       "      <td>480</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>705</th>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>706</td>\n",
       "      <td>0.182331</td>\n",
       "      <td>0.030075</td>\n",
       "      <td>16</td>\n",
       "      <td>6750</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4747</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2363</td>\n",
       "      <td>0</td>\n",
       "      <td>2363</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>706 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     age  black  case  clerical  construc  educ  earns74  gdhlth  inlf  leis1  \\\n",
       "0     32      0     1  0.000000  0.000000    12        0       0     1   3529   \n",
       "1     31      0     2  0.000000  0.000000    14     9500       1     1   2140   \n",
       "2     44      0     3  0.000000  0.000000    17    42500       1     1   4595   \n",
       "3     30      0     4  0.000000  0.000000    12    42500       1     1   3211   \n",
       "4     64      0     5  0.000000  0.000000    14     2500       1     1   4052   \n",
       "..   ...    ...   ...       ...       ...   ...      ...     ...   ...    ...   \n",
       "701   45      0   702  0.182331  0.030075    12     5500       1     0   5069   \n",
       "702   34      0   703  0.182331  0.030075    10     2500       0     0   5885   \n",
       "703   37      0   704  0.182331  0.030075    12     3500       1     0   4719   \n",
       "704   54      0   705  0.182331  0.030075    17    32500       1     0   5149   \n",
       "705   30      0   706  0.182331  0.030075    16     6750       1     0   4747   \n",
       "\n",
       "     ...  spwrk75  totwrk  union  worknrm  workscnd  exper  yngkid  yrsmarr  \\\n",
       "0    ...        0    3438      0     3438         0     14       0       13   \n",
       "1    ...        0    5020      0     5020         0     11       0        0   \n",
       "2    ...        1    2815      0     2815         0     21       0        0   \n",
       "3    ...        1    3786      0     3786         0     12       0       12   \n",
       "4    ...        1    2580      0     2580         0     44       0       33   \n",
       "..   ...      ...     ...    ...      ...       ...    ...     ...      ...   \n",
       "701  ...        1    2026      0     2026         0     27       0       18   \n",
       "702  ...        0     675      1      465       210     18       0        4   \n",
       "703  ...        1    1851      0     1851         0     19       0       17   \n",
       "704  ...        1    1961      1     1481       480     31       0       22   \n",
       "705  ...        0    2363      0     2363         0      8       1        9   \n",
       "\n",
       "        hrwage  agesq  \n",
       "0     7.070004   1024  \n",
       "1     1.429999    961  \n",
       "2    20.529997   1936  \n",
       "3     9.619998    900  \n",
       "4     2.750000   4096  \n",
       "..         ...    ...  \n",
       "701        NaN   2025  \n",
       "702        NaN   1156  \n",
       "703        NaN   1369  \n",
       "704        NaN   2916  \n",
       "705        NaN    900  \n",
       "\n",
       "[706 rows x 34 columns]"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_sleep=pd.read_csv('https://raw.githubusercontent.com/artamonoff/Econometrica/master/python-notebooks/data-csv/sleep75.csv')\n",
    "data_sleep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "0458668d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.005</th>    <th>0.995]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td> 3446.8303</td> <td>   81.840</td> <td>   42.117</td> <td> 0.000</td> <td> 3235.446</td> <td> 3658.215</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>totwrk</th>    <td>   -0.1691</td> <td>    0.018</td> <td>   -9.358</td> <td> 0.000</td> <td>   -0.216</td> <td>   -0.122</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age</th>       <td>    2.7145</td> <td>    1.472</td> <td>    1.844</td> <td> 0.066</td> <td>   -1.089</td> <td>    6.517</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>south</th>     <td>  102.2718</td> <td>   41.925</td> <td>    2.439</td> <td> 0.015</td> <td>   -6.016</td> <td>  210.560</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>male</th>      <td>   87.1081</td> <td>   35.173</td> <td>    2.477</td> <td> 0.014</td> <td>   -3.741</td> <td>  177.957</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>smsa</th>      <td>  -54.1877</td> <td>   33.193</td> <td>   -1.632</td> <td> 0.103</td> <td> -139.923</td> <td>   31.548</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>yngkid</th>    <td>  -13.0513</td> <td>   50.459</td> <td>   -0.259</td> <td> 0.796</td> <td> -143.382</td> <td>  117.280</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>marr</th>      <td>   31.3604</td> <td>   42.263</td> <td>    0.742</td> <td> 0.458</td> <td>  -77.801</td> <td>  140.522</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>union</th>     <td>   11.8657</td> <td>   38.186</td> <td>    0.311</td> <td> 0.756</td> <td>  -86.765</td> <td>  110.496</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = smf.ols(data=data_sleep, formula = 'sleep~totwrk+age+south+male+smsa+yngkid+marr+union').fit()\n",
    "model.summary(alpha = 0.01).tables[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "b33d177b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "                             Test for Constraints                             \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "c0            87.1081     35.173     -0.082      0.934      18.050     156.166\n",
       "=============================================================================="
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.t_test('male=90')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "eb8ca345",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "706"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data_sleep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "13755196",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.5829013954343742"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cr = stats.t.ppf(1-0.01/2, len(data_sleep)-9)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "ac1c4209",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.08221931595257745"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta_cap = 87.1081\n",
    "st_err = 35.173\n",
    "t_nab = np.abs((beta_cap-90)/st_err)\n",
    "t_nab"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d5c9f7d",
   "metadata": {},
   "source": [
    "### Критическое значение Стьюдента больше наблюдаемого, коэффициент male несильно отличается от 87.1081"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3dbd606",
   "metadata": {},
   "source": [
    "### Задача 2.6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "b6ca3fe9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>black</th>\n",
       "      <th>case</th>\n",
       "      <th>clerical</th>\n",
       "      <th>construc</th>\n",
       "      <th>educ</th>\n",
       "      <th>earns74</th>\n",
       "      <th>gdhlth</th>\n",
       "      <th>inlf</th>\n",
       "      <th>leis1</th>\n",
       "      <th>...</th>\n",
       "      <th>spwrk75</th>\n",
       "      <th>totwrk</th>\n",
       "      <th>union</th>\n",
       "      <th>worknrm</th>\n",
       "      <th>workscnd</th>\n",
       "      <th>exper</th>\n",
       "      <th>yngkid</th>\n",
       "      <th>yrsmarr</th>\n",
       "      <th>hrwage</th>\n",
       "      <th>agesq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3529</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>3438</td>\n",
       "      <td>0</td>\n",
       "      <td>3438</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>7.070004</td>\n",
       "      <td>1024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14</td>\n",
       "      <td>9500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2140</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>5020</td>\n",
       "      <td>0</td>\n",
       "      <td>5020</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.429999</td>\n",
       "      <td>961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>17</td>\n",
       "      <td>42500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4595</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2815</td>\n",
       "      <td>0</td>\n",
       "      <td>2815</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.529997</td>\n",
       "      <td>1936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12</td>\n",
       "      <td>42500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3211</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>3786</td>\n",
       "      <td>0</td>\n",
       "      <td>3786</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>9.619998</td>\n",
       "      <td>900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14</td>\n",
       "      <td>2500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4052</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2580</td>\n",
       "      <td>0</td>\n",
       "      <td>2580</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>2.750000</td>\n",
       "      <td>4096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>701</th>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>702</td>\n",
       "      <td>0.182331</td>\n",
       "      <td>0.030075</td>\n",
       "      <td>12</td>\n",
       "      <td>5500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5069</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2026</td>\n",
       "      <td>0</td>\n",
       "      <td>2026</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>702</th>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>703</td>\n",
       "      <td>0.182331</td>\n",
       "      <td>0.030075</td>\n",
       "      <td>10</td>\n",
       "      <td>2500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5885</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>675</td>\n",
       "      <td>1</td>\n",
       "      <td>465</td>\n",
       "      <td>210</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>703</th>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>704</td>\n",
       "      <td>0.182331</td>\n",
       "      <td>0.030075</td>\n",
       "      <td>12</td>\n",
       "      <td>3500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4719</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1851</td>\n",
       "      <td>0</td>\n",
       "      <td>1851</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>704</th>\n",
       "      <td>54</td>\n",
       "      <td>0</td>\n",
       "      <td>705</td>\n",
       "      <td>0.182331</td>\n",
       "      <td>0.030075</td>\n",
       "      <td>17</td>\n",
       "      <td>32500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5149</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1961</td>\n",
       "      <td>1</td>\n",
       "      <td>1481</td>\n",
       "      <td>480</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>705</th>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>706</td>\n",
       "      <td>0.182331</td>\n",
       "      <td>0.030075</td>\n",
       "      <td>16</td>\n",
       "      <td>6750</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4747</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2363</td>\n",
       "      <td>0</td>\n",
       "      <td>2363</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>706 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     age  black  case  clerical  construc  educ  earns74  gdhlth  inlf  leis1  \\\n",
       "0     32      0     1  0.000000  0.000000    12        0       0     1   3529   \n",
       "1     31      0     2  0.000000  0.000000    14     9500       1     1   2140   \n",
       "2     44      0     3  0.000000  0.000000    17    42500       1     1   4595   \n",
       "3     30      0     4  0.000000  0.000000    12    42500       1     1   3211   \n",
       "4     64      0     5  0.000000  0.000000    14     2500       1     1   4052   \n",
       "..   ...    ...   ...       ...       ...   ...      ...     ...   ...    ...   \n",
       "701   45      0   702  0.182331  0.030075    12     5500       1     0   5069   \n",
       "702   34      0   703  0.182331  0.030075    10     2500       0     0   5885   \n",
       "703   37      0   704  0.182331  0.030075    12     3500       1     0   4719   \n",
       "704   54      0   705  0.182331  0.030075    17    32500       1     0   5149   \n",
       "705   30      0   706  0.182331  0.030075    16     6750       1     0   4747   \n",
       "\n",
       "     ...  spwrk75  totwrk  union  worknrm  workscnd  exper  yngkid  yrsmarr  \\\n",
       "0    ...        0    3438      0     3438         0     14       0       13   \n",
       "1    ...        0    5020      0     5020         0     11       0        0   \n",
       "2    ...        1    2815      0     2815         0     21       0        0   \n",
       "3    ...        1    3786      0     3786         0     12       0       12   \n",
       "4    ...        1    2580      0     2580         0     44       0       33   \n",
       "..   ...      ...     ...    ...      ...       ...    ...     ...      ...   \n",
       "701  ...        1    2026      0     2026         0     27       0       18   \n",
       "702  ...        0     675      1      465       210     18       0        4   \n",
       "703  ...        1    1851      0     1851         0     19       0       17   \n",
       "704  ...        1    1961      1     1481       480     31       0       22   \n",
       "705  ...        0    2363      0     2363         0      8       1        9   \n",
       "\n",
       "        hrwage  agesq  \n",
       "0     7.070004   1024  \n",
       "1     1.429999    961  \n",
       "2    20.529997   1936  \n",
       "3     9.619998    900  \n",
       "4     2.750000   4096  \n",
       "..         ...    ...  \n",
       "701        NaN   2025  \n",
       "702        NaN   1156  \n",
       "703        NaN   1369  \n",
       "704        NaN   2916  \n",
       "705        NaN    900  \n",
       "\n",
       "[706 rows x 34 columns]"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_sleep2=pd.read_csv('https://raw.githubusercontent.com/artamonoff/Econometrica/master/python-notebooks/data-csv/sleep75.csv')\n",
    "data_sleep2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "d3827bc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.005</th>    <th>0.995]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td> 3446.8303</td> <td>   81.840</td> <td>   42.117</td> <td> 0.000</td> <td> 3235.446</td> <td> 3658.215</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>totwrk</th>    <td>   -0.1691</td> <td>    0.018</td> <td>   -9.358</td> <td> 0.000</td> <td>   -0.216</td> <td>   -0.122</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age</th>       <td>    2.7145</td> <td>    1.472</td> <td>    1.844</td> <td> 0.066</td> <td>   -1.089</td> <td>    6.517</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>south</th>     <td>  102.2718</td> <td>   41.925</td> <td>    2.439</td> <td> 0.015</td> <td>   -6.016</td> <td>  210.560</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>male</th>      <td>   87.1081</td> <td>   35.173</td> <td>    2.477</td> <td> 0.014</td> <td>   -3.741</td> <td>  177.957</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>smsa</th>      <td>  -54.1877</td> <td>   33.193</td> <td>   -1.632</td> <td> 0.103</td> <td> -139.923</td> <td>   31.548</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>yngkid</th>    <td>  -13.0513</td> <td>   50.459</td> <td>   -0.259</td> <td> 0.796</td> <td> -143.382</td> <td>  117.280</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>marr</th>      <td>   31.3604</td> <td>   42.263</td> <td>    0.742</td> <td> 0.458</td> <td>  -77.801</td> <td>  140.522</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>union</th>     <td>   11.8657</td> <td>   38.186</td> <td>    0.311</td> <td> 0.756</td> <td>  -86.765</td> <td>  110.496</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = smf.ols(data=data_sleep, formula = 'sleep~totwrk+age+south+male+smsa+yngkid+marr+union').fit()\n",
    "model.summary(alpha = 0.01).tables[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "efd5c0b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "                             Test for Constraints                             \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "c0           102.2718     41.925      0.054      0.957      19.957     184.586\n",
       "=============================================================================="
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.t_test('south=100')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "fabb67fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "706"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data_sleep2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "042f4c21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.5829013954343742"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_cr = stats.t.ppf(1-0.01/2, len(data_sleep2)-9)\n",
    "t_cr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "27f47706",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.054187239117471656"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta_cap = 102.2718\n",
    "st_err = 41.925\n",
    "t_nab = np.abs((beta_cap-100)/st_err)\n",
    "t_nab"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7dcd2e4",
   "metadata": {},
   "source": [
    "### Критическое значение Стьюдента больше наблюдаемого, коэффициент south несильно отличается от 102.2718"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e3986a1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
